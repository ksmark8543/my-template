/**
 * @fileoverview gRPC-Web generated client stub for requester
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.25.3
// source: smartLink.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.requester = require('./smartLink_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.requester.RequesterClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.requester.RequesterPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.requester.Schedule,
 *   !proto.requester.ResultReply>}
 */
const methodDescriptor_Requester_process_schedule = new grpc.web.MethodDescriptor(
  '/requester.Requester/process_schedule',
  grpc.web.MethodType.UNARY,
  proto.requester.Schedule,
  proto.requester.ResultReply,
  /**
   * @param {!proto.requester.Schedule} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.requester.ResultReply.deserializeBinary
);


/**
 * @param {!proto.requester.Schedule} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.requester.ResultReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.requester.ResultReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.requester.RequesterClient.prototype.process_schedule =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/requester.Requester/process_schedule',
      request,
      metadata || {},
      methodDescriptor_Requester_process_schedule,
      callback);
};


/**
 * @param {!proto.requester.Schedule} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.requester.ResultReply>}
 *     Promise that resolves to the response
 */
proto.requester.RequesterPromiseClient.prototype.process_schedule =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/requester.Requester/process_schedule',
      request,
      metadata || {},
      methodDescriptor_Requester_process_schedule);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.requester.Order,
 *   !proto.requester.ResultReply>}
 */
const methodDescriptor_Requester_equipment_control = new grpc.web.MethodDescriptor(
  '/requester.Requester/equipment_control',
  grpc.web.MethodType.UNARY,
  proto.requester.Order,
  proto.requester.ResultReply,
  /**
   * @param {!proto.requester.Order} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.requester.ResultReply.deserializeBinary
);


/**
 * @param {!proto.requester.Order} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.requester.ResultReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.requester.ResultReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.requester.RequesterClient.prototype.equipment_control =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/requester.Requester/equipment_control',
      request,
      metadata || {},
      methodDescriptor_Requester_equipment_control,
      callback);
};


/**
 * @param {!proto.requester.Order} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.requester.ResultReply>}
 *     Promise that resolves to the response
 */
proto.requester.RequesterPromiseClient.prototype.equipment_control =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/requester.Requester/equipment_control',
      request,
      metadata || {},
      methodDescriptor_Requester_equipment_control);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.requester.GroupOrder,
 *   !proto.requester.ResultReply>}
 */
const methodDescriptor_Requester_equipment_group_control = new grpc.web.MethodDescriptor(
  '/requester.Requester/equipment_group_control',
  grpc.web.MethodType.UNARY,
  proto.requester.GroupOrder,
  proto.requester.ResultReply,
  /**
   * @param {!proto.requester.GroupOrder} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.requester.ResultReply.deserializeBinary
);


/**
 * @param {!proto.requester.GroupOrder} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.requester.ResultReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.requester.ResultReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.requester.RequesterClient.prototype.equipment_group_control =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/requester.Requester/equipment_group_control',
      request,
      metadata || {},
      methodDescriptor_Requester_equipment_group_control,
      callback);
};


/**
 * @param {!proto.requester.GroupOrder} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.requester.ResultReply>}
 *     Promise that resolves to the response
 */
proto.requester.RequesterPromiseClient.prototype.equipment_group_control =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/requester.Requester/equipment_group_control',
      request,
      metadata || {},
      methodDescriptor_Requester_equipment_group_control);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.requester.Equipment,
 *   !proto.requester.ResultReply>}
 */
const methodDescriptor_Requester_set_equipment = new grpc.web.MethodDescriptor(
  '/requester.Requester/set_equipment',
  grpc.web.MethodType.UNARY,
  proto.requester.Equipment,
  proto.requester.ResultReply,
  /**
   * @param {!proto.requester.Equipment} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.requester.ResultReply.deserializeBinary
);


/**
 * @param {!proto.requester.Equipment} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.requester.ResultReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.requester.ResultReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.requester.RequesterClient.prototype.set_equipment =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/requester.Requester/set_equipment',
      request,
      metadata || {},
      methodDescriptor_Requester_set_equipment,
      callback);
};


/**
 * @param {!proto.requester.Equipment} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.requester.ResultReply>}
 *     Promise that resolves to the response
 */
proto.requester.RequesterPromiseClient.prototype.set_equipment =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/requester.Requester/set_equipment',
      request,
      metadata || {},
      methodDescriptor_Requester_set_equipment);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.requester.EquipmentGroup,
 *   !proto.requester.ResultReply>}
 */
const methodDescriptor_Requester_set_equipment_group = new grpc.web.MethodDescriptor(
  '/requester.Requester/set_equipment_group',
  grpc.web.MethodType.UNARY,
  proto.requester.EquipmentGroup,
  proto.requester.ResultReply,
  /**
   * @param {!proto.requester.EquipmentGroup} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.requester.ResultReply.deserializeBinary
);


/**
 * @param {!proto.requester.EquipmentGroup} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.requester.ResultReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.requester.ResultReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.requester.RequesterClient.prototype.set_equipment_group =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/requester.Requester/set_equipment_group',
      request,
      metadata || {},
      methodDescriptor_Requester_set_equipment_group,
      callback);
};


/**
 * @param {!proto.requester.EquipmentGroup} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.requester.ResultReply>}
 *     Promise that resolves to the response
 */
proto.requester.RequesterPromiseClient.prototype.set_equipment_group =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/requester.Requester/set_equipment_group',
      request,
      metadata || {},
      methodDescriptor_Requester_set_equipment_group);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.requester.Window,
 *   !proto.requester.ResultReply>}
 */
const methodDescriptor_Requester_set_window_open_close = new grpc.web.MethodDescriptor(
  '/requester.Requester/set_window_open_close',
  grpc.web.MethodType.UNARY,
  proto.requester.Window,
  proto.requester.ResultReply,
  /**
   * @param {!proto.requester.Window} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.requester.ResultReply.deserializeBinary
);


/**
 * @param {!proto.requester.Window} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.requester.ResultReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.requester.ResultReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.requester.RequesterClient.prototype.set_window_open_close =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/requester.Requester/set_window_open_close',
      request,
      metadata || {},
      methodDescriptor_Requester_set_window_open_close,
      callback);
};


/**
 * @param {!proto.requester.Window} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.requester.ResultReply>}
 *     Promise that resolves to the response
 */
proto.requester.RequesterPromiseClient.prototype.set_window_open_close =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/requester.Requester/set_window_open_close',
      request,
      metadata || {},
      methodDescriptor_Requester_set_window_open_close);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.requester.ReloadMessage,
 *   !proto.requester.ResultReply>}
 */
const methodDescriptor_Requester_reload_equipment_request = new grpc.web.MethodDescriptor(
  '/requester.Requester/reload_equipment_request',
  grpc.web.MethodType.UNARY,
  proto.requester.ReloadMessage,
  proto.requester.ResultReply,
  /**
   * @param {!proto.requester.ReloadMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.requester.ResultReply.deserializeBinary
);


/**
 * @param {!proto.requester.ReloadMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.requester.ResultReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.requester.ResultReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.requester.RequesterClient.prototype.reload_equipment_request =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/requester.Requester/reload_equipment_request',
      request,
      metadata || {},
      methodDescriptor_Requester_reload_equipment_request,
      callback);
};


/**
 * @param {!proto.requester.ReloadMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.requester.ResultReply>}
 *     Promise that resolves to the response
 */
proto.requester.RequesterPromiseClient.prototype.reload_equipment_request =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/requester.Requester/reload_equipment_request',
      request,
      metadata || {},
      methodDescriptor_Requester_reload_equipment_request);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.requester.ReloadMessage,
 *   !proto.requester.ResultReply>}
 */
const methodDescriptor_Requester_reload_schedule_request = new grpc.web.MethodDescriptor(
  '/requester.Requester/reload_schedule_request',
  grpc.web.MethodType.UNARY,
  proto.requester.ReloadMessage,
  proto.requester.ResultReply,
  /**
   * @param {!proto.requester.ReloadMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.requester.ResultReply.deserializeBinary
);


/**
 * @param {!proto.requester.ReloadMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.requester.ResultReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.requester.ResultReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.requester.RequesterClient.prototype.reload_schedule_request =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/requester.Requester/reload_schedule_request',
      request,
      metadata || {},
      methodDescriptor_Requester_reload_schedule_request,
      callback);
};


/**
 * @param {!proto.requester.ReloadMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.requester.ResultReply>}
 *     Promise that resolves to the response
 */
proto.requester.RequesterPromiseClient.prototype.reload_schedule_request =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/requester.Requester/reload_schedule_request',
      request,
      metadata || {},
      methodDescriptor_Requester_reload_schedule_request);
};


module.exports = proto.requester;

