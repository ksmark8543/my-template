// source: smartLink.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.requester.AllOrder', null, global);
goog.exportSymbol('proto.requester.Equipment', null, global);
goog.exportSymbol('proto.requester.EquipmentGroup', null, global);
goog.exportSymbol('proto.requester.GroupOrder', null, global);
goog.exportSymbol('proto.requester.Interval', null, global);
goog.exportSymbol('proto.requester.Order', null, global);
goog.exportSymbol('proto.requester.ReloadMessage', null, global);
goog.exportSymbol('proto.requester.ResultReply', null, global);
goog.exportSymbol('proto.requester.Schedule', null, global);
goog.exportSymbol('proto.requester.SensorCondition', null, global);
goog.exportSymbol('proto.requester.SensorConditions', null, global);
goog.exportSymbol('proto.requester.SensorGroupCondition', null, global);
goog.exportSymbol('proto.requester.SunInfo', null, global);
goog.exportSymbol('proto.requester.TimeCondition', null, global);
goog.exportSymbol('proto.requester.TimeInfo', null, global);
goog.exportSymbol('proto.requester.Window', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.ReloadMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.requester.ReloadMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.ReloadMessage.displayName = 'proto.requester.ReloadMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.Equipment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.requester.Equipment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.Equipment.displayName = 'proto.requester.Equipment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.EquipmentGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.requester.EquipmentGroup.repeatedFields_, null);
};
goog.inherits(proto.requester.EquipmentGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.EquipmentGroup.displayName = 'proto.requester.EquipmentGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.Window = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.requester.Window, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.Window.displayName = 'proto.requester.Window';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.Schedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.requester.Schedule.repeatedFields_, null);
};
goog.inherits(proto.requester.Schedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.Schedule.displayName = 'proto.requester.Schedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.TimeCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.requester.TimeCondition.repeatedFields_, null);
};
goog.inherits(proto.requester.TimeCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.TimeCondition.displayName = 'proto.requester.TimeCondition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.TimeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.requester.TimeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.TimeInfo.displayName = 'proto.requester.TimeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.SunInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.requester.SunInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.SunInfo.displayName = 'proto.requester.SunInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.Interval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.requester.Interval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.Interval.displayName = 'proto.requester.Interval';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.SensorConditions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.requester.SensorConditions.repeatedFields_, null);
};
goog.inherits(proto.requester.SensorConditions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.SensorConditions.displayName = 'proto.requester.SensorConditions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.SensorCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.requester.SensorCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.SensorCondition.displayName = 'proto.requester.SensorCondition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.SensorGroupCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.requester.SensorGroupCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.SensorGroupCondition.displayName = 'proto.requester.SensorGroupCondition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.requester.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.Order.displayName = 'proto.requester.Order';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.GroupOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.requester.GroupOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.GroupOrder.displayName = 'proto.requester.GroupOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.AllOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.requester.AllOrder.repeatedFields_, null);
};
goog.inherits(proto.requester.AllOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.AllOrder.displayName = 'proto.requester.AllOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.requester.ResultReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.requester.ResultReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.requester.ResultReply.displayName = 'proto.requester.ResultReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.ReloadMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.ReloadMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.ReloadMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.ReloadMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestTime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestType: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.ReloadMessage}
 */
proto.requester.ReloadMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.ReloadMessage;
  return proto.requester.ReloadMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.ReloadMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.ReloadMessage}
 */
proto.requester.ReloadMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.ReloadMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.ReloadMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.ReloadMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.ReloadMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestTime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string request_time = 1;
 * @return {string}
 */
proto.requester.ReloadMessage.prototype.getRequestTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.ReloadMessage} returns this
 */
proto.requester.ReloadMessage.prototype.setRequestTime = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string request_type = 2;
 * @return {string}
 */
proto.requester.ReloadMessage.prototype.getRequestType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.ReloadMessage} returns this
 */
proto.requester.ReloadMessage.prototype.setRequestType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.Equipment.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.Equipment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.Equipment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.Equipment.toObject = function(includeInstance, msg) {
  var f, obj = {
    act: jspb.Message.getFieldWithDefault(msg, 1, ""),
    equipmentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    equipmentType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    statusRegisterStart: jspb.Message.getFieldWithDefault(msg, 5, 0),
    controlRegisterStart: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.Equipment}
 */
proto.requester.Equipment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.Equipment;
  return proto.requester.Equipment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.Equipment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.Equipment}
 */
proto.requester.Equipment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAct(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEquipmentId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEquipmentType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatusRegisterStart(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setControlRegisterStart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.Equipment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.Equipment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.Equipment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.Equipment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAct();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEquipmentId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEquipmentType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatusRegisterStart();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getControlRegisterStart();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string act = 1;
 * @return {string}
 */
proto.requester.Equipment.prototype.getAct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.Equipment} returns this
 */
proto.requester.Equipment.prototype.setAct = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 equipment_id = 2;
 * @return {number}
 */
proto.requester.Equipment.prototype.getEquipmentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.Equipment} returns this
 */
proto.requester.Equipment.prototype.setEquipmentId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string equipment_type = 3;
 * @return {string}
 */
proto.requester.Equipment.prototype.getEquipmentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.Equipment} returns this
 */
proto.requester.Equipment.prototype.setEquipmentType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.requester.Equipment.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.Equipment} returns this
 */
proto.requester.Equipment.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 status_register_start = 5;
 * @return {number}
 */
proto.requester.Equipment.prototype.getStatusRegisterStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.Equipment} returns this
 */
proto.requester.Equipment.prototype.setStatusRegisterStart = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 control_register_start = 6;
 * @return {number}
 */
proto.requester.Equipment.prototype.getControlRegisterStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.Equipment} returns this
 */
proto.requester.Equipment.prototype.setControlRegisterStart = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.requester.EquipmentGroup.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.EquipmentGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.EquipmentGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.EquipmentGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.EquipmentGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    act: jspb.Message.getFieldWithDefault(msg, 1, ""),
    equipmentGroupId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    equipmentType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    equipmentIdsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.EquipmentGroup}
 */
proto.requester.EquipmentGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.EquipmentGroup;
  return proto.requester.EquipmentGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.EquipmentGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.EquipmentGroup}
 */
proto.requester.EquipmentGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAct(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEquipmentGroupId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEquipmentType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEquipmentIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.EquipmentGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.EquipmentGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.EquipmentGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.EquipmentGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAct();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEquipmentGroupId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEquipmentType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEquipmentIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      5,
      f
    );
  }
};


/**
 * optional string act = 1;
 * @return {string}
 */
proto.requester.EquipmentGroup.prototype.getAct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.EquipmentGroup} returns this
 */
proto.requester.EquipmentGroup.prototype.setAct = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 equipment_group_id = 2;
 * @return {number}
 */
proto.requester.EquipmentGroup.prototype.getEquipmentGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.EquipmentGroup} returns this
 */
proto.requester.EquipmentGroup.prototype.setEquipmentGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string equipment_type = 3;
 * @return {string}
 */
proto.requester.EquipmentGroup.prototype.getEquipmentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.EquipmentGroup} returns this
 */
proto.requester.EquipmentGroup.prototype.setEquipmentType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.requester.EquipmentGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.EquipmentGroup} returns this
 */
proto.requester.EquipmentGroup.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated int32 equipment_ids = 5;
 * @return {!Array<number>}
 */
proto.requester.EquipmentGroup.prototype.getEquipmentIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.requester.EquipmentGroup} returns this
 */
proto.requester.EquipmentGroup.prototype.setEquipmentIdsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.requester.EquipmentGroup} returns this
 */
proto.requester.EquipmentGroup.prototype.addEquipmentIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.requester.EquipmentGroup} returns this
 */
proto.requester.EquipmentGroup.prototype.clearEquipmentIdsList = function() {
  return this.setEquipmentIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.Window.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.Window.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.Window} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.Window.toObject = function(includeInstance, msg) {
  var f, obj = {
    equipmentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    openTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    closeTime: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.Window}
 */
proto.requester.Window.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.Window;
  return proto.requester.Window.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.Window} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.Window}
 */
proto.requester.Window.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEquipmentId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOpenTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCloseTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.Window.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.Window.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.Window} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.Window.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEquipmentId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getOpenTime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCloseTime();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 equipment_id = 1;
 * @return {number}
 */
proto.requester.Window.prototype.getEquipmentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.Window} returns this
 */
proto.requester.Window.prototype.setEquipmentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 open_time = 2;
 * @return {number}
 */
proto.requester.Window.prototype.getOpenTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.Window} returns this
 */
proto.requester.Window.prototype.setOpenTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 close_time = 3;
 * @return {number}
 */
proto.requester.Window.prototype.getCloseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.Window} returns this
 */
proto.requester.Window.prototype.setCloseTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.requester.Schedule.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.Schedule.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.Schedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.Schedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.Schedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheduleId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timecondition: (f = msg.getTimecondition()) && proto.requester.TimeCondition.toObject(includeInstance, f),
    sensorconditionsList: jspb.Message.toObjectList(msg.getSensorconditionsList(),
    proto.requester.SensorConditions.toObject, includeInstance),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.requester.AllOrder.toObject, includeInstance),
    act: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.Schedule}
 */
proto.requester.Schedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.Schedule;
  return proto.requester.Schedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.Schedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.Schedule}
 */
proto.requester.Schedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScheduleId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.requester.TimeCondition;
      reader.readMessage(value,proto.requester.TimeCondition.deserializeBinaryFromReader);
      msg.setTimecondition(value);
      break;
    case 5:
      var value = new proto.requester.SensorConditions;
      reader.readMessage(value,proto.requester.SensorConditions.deserializeBinaryFromReader);
      msg.addSensorconditions(value);
      break;
    case 6:
      var value = new proto.requester.AllOrder;
      reader.readMessage(value,proto.requester.AllOrder.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.Schedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.Schedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.Schedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.Schedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheduleId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimecondition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.requester.TimeCondition.serializeBinaryToWriter
    );
  }
  f = message.getSensorconditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.requester.SensorConditions.serializeBinaryToWriter
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.requester.AllOrder.serializeBinaryToWriter
    );
  }
  f = message.getAct();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int32 schedule_id = 1;
 * @return {number}
 */
proto.requester.Schedule.prototype.getScheduleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.Schedule} returns this
 */
proto.requester.Schedule.prototype.setScheduleId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.requester.Schedule.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.Schedule} returns this
 */
proto.requester.Schedule.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.requester.Schedule.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.Schedule} returns this
 */
proto.requester.Schedule.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional TimeCondition timeCondition = 4;
 * @return {?proto.requester.TimeCondition}
 */
proto.requester.Schedule.prototype.getTimecondition = function() {
  return /** @type{?proto.requester.TimeCondition} */ (
    jspb.Message.getWrapperField(this, proto.requester.TimeCondition, 4));
};


/**
 * @param {?proto.requester.TimeCondition|undefined} value
 * @return {!proto.requester.Schedule} returns this
*/
proto.requester.Schedule.prototype.setTimecondition = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.requester.Schedule} returns this
 */
proto.requester.Schedule.prototype.clearTimecondition = function() {
  return this.setTimecondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.requester.Schedule.prototype.hasTimecondition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated SensorConditions sensorConditions = 5;
 * @return {!Array<!proto.requester.SensorConditions>}
 */
proto.requester.Schedule.prototype.getSensorconditionsList = function() {
  return /** @type{!Array<!proto.requester.SensorConditions>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.requester.SensorConditions, 5));
};


/**
 * @param {!Array<!proto.requester.SensorConditions>} value
 * @return {!proto.requester.Schedule} returns this
*/
proto.requester.Schedule.prototype.setSensorconditionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.requester.SensorConditions=} opt_value
 * @param {number=} opt_index
 * @return {!proto.requester.SensorConditions}
 */
proto.requester.Schedule.prototype.addSensorconditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.requester.SensorConditions, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.requester.Schedule} returns this
 */
proto.requester.Schedule.prototype.clearSensorconditionsList = function() {
  return this.setSensorconditionsList([]);
};


/**
 * repeated AllOrder orders = 6;
 * @return {!Array<!proto.requester.AllOrder>}
 */
proto.requester.Schedule.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.requester.AllOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.requester.AllOrder, 6));
};


/**
 * @param {!Array<!proto.requester.AllOrder>} value
 * @return {!proto.requester.Schedule} returns this
*/
proto.requester.Schedule.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.requester.AllOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.requester.AllOrder}
 */
proto.requester.Schedule.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.requester.AllOrder, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.requester.Schedule} returns this
 */
proto.requester.Schedule.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};


/**
 * optional string act = 7;
 * @return {string}
 */
proto.requester.Schedule.prototype.getAct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.Schedule} returns this
 */
proto.requester.Schedule.prototype.setAct = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.requester.TimeCondition.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.TimeCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.TimeCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.TimeCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.TimeCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTime: (f = msg.getStartTime()) && proto.requester.TimeInfo.toObject(includeInstance, f),
    endTime: (f = msg.getEndTime()) && proto.requester.TimeInfo.toObject(includeInstance, f),
    interval: (f = msg.getInterval()) && proto.requester.Interval.toObject(includeInstance, f),
    dayList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.TimeCondition}
 */
proto.requester.TimeCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.TimeCondition;
  return proto.requester.TimeCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.TimeCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.TimeCondition}
 */
proto.requester.TimeCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.requester.TimeInfo;
      reader.readMessage(value,proto.requester.TimeInfo.deserializeBinaryFromReader);
      msg.setStartTime(value);
      break;
    case 2:
      var value = new proto.requester.TimeInfo;
      reader.readMessage(value,proto.requester.TimeInfo.deserializeBinaryFromReader);
      msg.setEndTime(value);
      break;
    case 3:
      var value = new proto.requester.Interval;
      reader.readMessage(value,proto.requester.Interval.deserializeBinaryFromReader);
      msg.setInterval(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDay(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.TimeCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.TimeCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.TimeCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.TimeCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.requester.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getEndTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.requester.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getInterval();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.requester.Interval.serializeBinaryToWriter
    );
  }
  f = message.getDayList();
  if (f.length > 0) {
    writer.writePackedInt32(
      4,
      f
    );
  }
};


/**
 * optional TimeInfo start_time = 1;
 * @return {?proto.requester.TimeInfo}
 */
proto.requester.TimeCondition.prototype.getStartTime = function() {
  return /** @type{?proto.requester.TimeInfo} */ (
    jspb.Message.getWrapperField(this, proto.requester.TimeInfo, 1));
};


/**
 * @param {?proto.requester.TimeInfo|undefined} value
 * @return {!proto.requester.TimeCondition} returns this
*/
proto.requester.TimeCondition.prototype.setStartTime = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.requester.TimeCondition} returns this
 */
proto.requester.TimeCondition.prototype.clearStartTime = function() {
  return this.setStartTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.requester.TimeCondition.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimeInfo end_time = 2;
 * @return {?proto.requester.TimeInfo}
 */
proto.requester.TimeCondition.prototype.getEndTime = function() {
  return /** @type{?proto.requester.TimeInfo} */ (
    jspb.Message.getWrapperField(this, proto.requester.TimeInfo, 2));
};


/**
 * @param {?proto.requester.TimeInfo|undefined} value
 * @return {!proto.requester.TimeCondition} returns this
*/
proto.requester.TimeCondition.prototype.setEndTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.requester.TimeCondition} returns this
 */
proto.requester.TimeCondition.prototype.clearEndTime = function() {
  return this.setEndTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.requester.TimeCondition.prototype.hasEndTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Interval interval = 3;
 * @return {?proto.requester.Interval}
 */
proto.requester.TimeCondition.prototype.getInterval = function() {
  return /** @type{?proto.requester.Interval} */ (
    jspb.Message.getWrapperField(this, proto.requester.Interval, 3));
};


/**
 * @param {?proto.requester.Interval|undefined} value
 * @return {!proto.requester.TimeCondition} returns this
*/
proto.requester.TimeCondition.prototype.setInterval = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.requester.TimeCondition} returns this
 */
proto.requester.TimeCondition.prototype.clearInterval = function() {
  return this.setInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.requester.TimeCondition.prototype.hasInterval = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated int32 day = 4;
 * @return {!Array<number>}
 */
proto.requester.TimeCondition.prototype.getDayList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.requester.TimeCondition} returns this
 */
proto.requester.TimeCondition.prototype.setDayList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.requester.TimeCondition} returns this
 */
proto.requester.TimeCondition.prototype.addDay = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.requester.TimeCondition} returns this
 */
proto.requester.TimeCondition.prototype.clearDayList = function() {
  return this.setDayList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.TimeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.TimeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.TimeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.TimeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    hour: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minute: jspb.Message.getFieldWithDefault(msg, 2, 0),
    suninfo: (f = msg.getSuninfo()) && proto.requester.SunInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.TimeInfo}
 */
proto.requester.TimeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.TimeInfo;
  return proto.requester.TimeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.TimeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.TimeInfo}
 */
proto.requester.TimeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHour(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinute(value);
      break;
    case 3:
      var value = new proto.requester.SunInfo;
      reader.readMessage(value,proto.requester.SunInfo.deserializeBinaryFromReader);
      msg.setSuninfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.TimeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.TimeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.TimeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.TimeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHour();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMinute();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSuninfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.requester.SunInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 hour = 1;
 * @return {number}
 */
proto.requester.TimeInfo.prototype.getHour = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.TimeInfo} returns this
 */
proto.requester.TimeInfo.prototype.setHour = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 minute = 2;
 * @return {number}
 */
proto.requester.TimeInfo.prototype.getMinute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.TimeInfo} returns this
 */
proto.requester.TimeInfo.prototype.setMinute = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional SunInfo sunInfo = 3;
 * @return {?proto.requester.SunInfo}
 */
proto.requester.TimeInfo.prototype.getSuninfo = function() {
  return /** @type{?proto.requester.SunInfo} */ (
    jspb.Message.getWrapperField(this, proto.requester.SunInfo, 3));
};


/**
 * @param {?proto.requester.SunInfo|undefined} value
 * @return {!proto.requester.TimeInfo} returns this
*/
proto.requester.TimeInfo.prototype.setSuninfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.requester.TimeInfo} returns this
 */
proto.requester.TimeInfo.prototype.clearSuninfo = function() {
  return this.setSuninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.requester.TimeInfo.prototype.hasSuninfo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.SunInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.SunInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.SunInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.SunInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sunType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.SunInfo}
 */
proto.requester.SunInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.SunInfo;
  return proto.requester.SunInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.SunInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.SunInfo}
 */
proto.requester.SunInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSunType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.SunInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.SunInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.SunInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.SunInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSunType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sun_type = 1;
 * @return {string}
 */
proto.requester.SunInfo.prototype.getSunType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.SunInfo} returns this
 */
proto.requester.SunInfo.prototype.setSunType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string time = 2;
 * @return {string}
 */
proto.requester.SunInfo.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.SunInfo} returns this
 */
proto.requester.SunInfo.prototype.setTime = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.Interval.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.Interval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.Interval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.Interval.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectDate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    unit: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.Interval}
 */
proto.requester.Interval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.Interval;
  return proto.requester.Interval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.Interval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.Interval}
 */
proto.requester.Interval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelectDate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.Interval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.Interval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.Interval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.Interval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string select_date = 1;
 * @return {string}
 */
proto.requester.Interval.prototype.getSelectDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.Interval} returns this
 */
proto.requester.Interval.prototype.setSelectDate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string unit = 2;
 * @return {string}
 */
proto.requester.Interval.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.Interval} returns this
 */
proto.requester.Interval.prototype.setUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 value = 3;
 * @return {number}
 */
proto.requester.Interval.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.Interval} returns this
 */
proto.requester.Interval.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.requester.SensorConditions.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.SensorConditions.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.SensorConditions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.SensorConditions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.SensorConditions.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorconditionList: jspb.Message.toObjectList(msg.getSensorconditionList(),
    proto.requester.SensorCondition.toObject, includeInstance),
    sensorgroupconditionList: jspb.Message.toObjectList(msg.getSensorgroupconditionList(),
    proto.requester.SensorGroupCondition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.SensorConditions}
 */
proto.requester.SensorConditions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.SensorConditions;
  return proto.requester.SensorConditions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.SensorConditions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.SensorConditions}
 */
proto.requester.SensorConditions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.requester.SensorCondition;
      reader.readMessage(value,proto.requester.SensorCondition.deserializeBinaryFromReader);
      msg.addSensorcondition(value);
      break;
    case 2:
      var value = new proto.requester.SensorGroupCondition;
      reader.readMessage(value,proto.requester.SensorGroupCondition.deserializeBinaryFromReader);
      msg.addSensorgroupcondition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.SensorConditions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.SensorConditions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.SensorConditions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.SensorConditions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorconditionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.requester.SensorCondition.serializeBinaryToWriter
    );
  }
  f = message.getSensorgroupconditionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.requester.SensorGroupCondition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SensorCondition sensorCondition = 1;
 * @return {!Array<!proto.requester.SensorCondition>}
 */
proto.requester.SensorConditions.prototype.getSensorconditionList = function() {
  return /** @type{!Array<!proto.requester.SensorCondition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.requester.SensorCondition, 1));
};


/**
 * @param {!Array<!proto.requester.SensorCondition>} value
 * @return {!proto.requester.SensorConditions} returns this
*/
proto.requester.SensorConditions.prototype.setSensorconditionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.requester.SensorCondition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.requester.SensorCondition}
 */
proto.requester.SensorConditions.prototype.addSensorcondition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.requester.SensorCondition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.requester.SensorConditions} returns this
 */
proto.requester.SensorConditions.prototype.clearSensorconditionList = function() {
  return this.setSensorconditionList([]);
};


/**
 * repeated SensorGroupCondition sensorGroupCondition = 2;
 * @return {!Array<!proto.requester.SensorGroupCondition>}
 */
proto.requester.SensorConditions.prototype.getSensorgroupconditionList = function() {
  return /** @type{!Array<!proto.requester.SensorGroupCondition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.requester.SensorGroupCondition, 2));
};


/**
 * @param {!Array<!proto.requester.SensorGroupCondition>} value
 * @return {!proto.requester.SensorConditions} returns this
*/
proto.requester.SensorConditions.prototype.setSensorgroupconditionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.requester.SensorGroupCondition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.requester.SensorGroupCondition}
 */
proto.requester.SensorConditions.prototype.addSensorgroupcondition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.requester.SensorGroupCondition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.requester.SensorConditions} returns this
 */
proto.requester.SensorConditions.prototype.clearSensorgroupconditionList = function() {
  return this.setSensorgroupconditionList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.SensorCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.SensorCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.SensorCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.SensorCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sensorUp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sensorDown: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.SensorCondition}
 */
proto.requester.SensorCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.SensorCondition;
  return proto.requester.SensorCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.SensorCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.SensorCondition}
 */
proto.requester.SensorCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSensorUp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSensorDown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.SensorCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.SensorCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.SensorCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.SensorCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSensorUp();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSensorDown();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string sensor_id = 1;
 * @return {string}
 */
proto.requester.SensorCondition.prototype.getSensorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.SensorCondition} returns this
 */
proto.requester.SensorCondition.prototype.setSensorId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 sensor_up = 2;
 * @return {number}
 */
proto.requester.SensorCondition.prototype.getSensorUp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.SensorCondition} returns this
 */
proto.requester.SensorCondition.prototype.setSensorUp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 sensor_down = 3;
 * @return {number}
 */
proto.requester.SensorCondition.prototype.getSensorDown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.SensorCondition} returns this
 */
proto.requester.SensorCondition.prototype.setSensorDown = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.SensorGroupCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.SensorGroupCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.SensorGroupCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.SensorGroupCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorGroupId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sensorUse: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sensorGroupUp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sensorGroupDown: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.SensorGroupCondition}
 */
proto.requester.SensorGroupCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.SensorGroupCondition;
  return proto.requester.SensorGroupCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.SensorGroupCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.SensorGroupCondition}
 */
proto.requester.SensorGroupCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorGroupId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorUse(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSensorGroupUp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSensorGroupDown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.SensorGroupCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.SensorGroupCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.SensorGroupCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.SensorGroupCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSensorUse();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSensorGroupUp();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSensorGroupDown();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string sensor_group_id = 1;
 * @return {string}
 */
proto.requester.SensorGroupCondition.prototype.getSensorGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.SensorGroupCondition} returns this
 */
proto.requester.SensorGroupCondition.prototype.setSensorGroupId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sensor_use = 2;
 * @return {string}
 */
proto.requester.SensorGroupCondition.prototype.getSensorUse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.SensorGroupCondition} returns this
 */
proto.requester.SensorGroupCondition.prototype.setSensorUse = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 sensor_group_up = 3;
 * @return {number}
 */
proto.requester.SensorGroupCondition.prototype.getSensorGroupUp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.SensorGroupCondition} returns this
 */
proto.requester.SensorGroupCondition.prototype.setSensorGroupUp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 sensor_group_down = 4;
 * @return {number}
 */
proto.requester.SensorGroupCondition.prototype.getSensorGroupDown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.SensorGroupCondition} returns this
 */
proto.requester.SensorGroupCondition.prototype.setSensorGroupDown = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    equipmentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    act: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.Order}
 */
proto.requester.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.Order;
  return proto.requester.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.Order}
 */
proto.requester.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEquipmentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAct(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEquipmentId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAct();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 equipment_id = 1;
 * @return {number}
 */
proto.requester.Order.prototype.getEquipmentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.Order} returns this
 */
proto.requester.Order.prototype.setEquipmentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string act = 2;
 * @return {string}
 */
proto.requester.Order.prototype.getAct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.Order} returns this
 */
proto.requester.Order.prototype.setAct = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 value = 3;
 * @return {number}
 */
proto.requester.Order.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.Order} returns this
 */
proto.requester.Order.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.GroupOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.GroupOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.GroupOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.GroupOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    equipmentGroupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    act: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.GroupOrder}
 */
proto.requester.GroupOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.GroupOrder;
  return proto.requester.GroupOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.GroupOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.GroupOrder}
 */
proto.requester.GroupOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEquipmentGroupId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAct(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.GroupOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.GroupOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.GroupOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.GroupOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEquipmentGroupId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAct();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 equipment_group_id = 1;
 * @return {number}
 */
proto.requester.GroupOrder.prototype.getEquipmentGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.GroupOrder} returns this
 */
proto.requester.GroupOrder.prototype.setEquipmentGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string act = 2;
 * @return {string}
 */
proto.requester.GroupOrder.prototype.getAct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.GroupOrder} returns this
 */
proto.requester.GroupOrder.prototype.setAct = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 value = 3;
 * @return {number}
 */
proto.requester.GroupOrder.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.requester.GroupOrder} returns this
 */
proto.requester.GroupOrder.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.requester.AllOrder.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.AllOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.AllOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.AllOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.AllOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.requester.Order.toObject, includeInstance),
    groupordersList: jspb.Message.toObjectList(msg.getGroupordersList(),
    proto.requester.GroupOrder.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.AllOrder}
 */
proto.requester.AllOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.AllOrder;
  return proto.requester.AllOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.AllOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.AllOrder}
 */
proto.requester.AllOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.requester.Order;
      reader.readMessage(value,proto.requester.Order.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 2:
      var value = new proto.requester.GroupOrder;
      reader.readMessage(value,proto.requester.GroupOrder.deserializeBinaryFromReader);
      msg.addGrouporders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.AllOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.AllOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.AllOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.AllOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.requester.Order.serializeBinaryToWriter
    );
  }
  f = message.getGroupordersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.requester.GroupOrder.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Order orders = 1;
 * @return {!Array<!proto.requester.Order>}
 */
proto.requester.AllOrder.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.requester.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.requester.Order, 1));
};


/**
 * @param {!Array<!proto.requester.Order>} value
 * @return {!proto.requester.AllOrder} returns this
*/
proto.requester.AllOrder.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.requester.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.requester.Order}
 */
proto.requester.AllOrder.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.requester.Order, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.requester.AllOrder} returns this
 */
proto.requester.AllOrder.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};


/**
 * repeated GroupOrder groupOrders = 2;
 * @return {!Array<!proto.requester.GroupOrder>}
 */
proto.requester.AllOrder.prototype.getGroupordersList = function() {
  return /** @type{!Array<!proto.requester.GroupOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.requester.GroupOrder, 2));
};


/**
 * @param {!Array<!proto.requester.GroupOrder>} value
 * @return {!proto.requester.AllOrder} returns this
*/
proto.requester.AllOrder.prototype.setGroupordersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.requester.GroupOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.requester.GroupOrder}
 */
proto.requester.AllOrder.prototype.addGrouporders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.requester.GroupOrder, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.requester.AllOrder} returns this
 */
proto.requester.AllOrder.prototype.clearGroupordersList = function() {
  return this.setGroupordersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.requester.ResultReply.prototype.toObject = function(opt_includeInstance) {
  return proto.requester.ResultReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.requester.ResultReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.ResultReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    log: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.requester.ResultReply}
 */
proto.requester.ResultReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.requester.ResultReply;
  return proto.requester.ResultReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.requester.ResultReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.requester.ResultReply}
 */
proto.requester.ResultReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.requester.ResultReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.requester.ResultReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.requester.ResultReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.requester.ResultReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getLog();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string request_name = 1;
 * @return {string}
 */
proto.requester.ResultReply.prototype.getRequestName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.ResultReply} returns this
 */
proto.requester.ResultReply.prototype.setRequestName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.requester.ResultReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.requester.ResultReply} returns this
 */
proto.requester.ResultReply.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string log = 3;
 * @return {string}
 */
proto.requester.ResultReply.prototype.getLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.requester.ResultReply} returns this
 */
proto.requester.ResultReply.prototype.setLog = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.requester);
